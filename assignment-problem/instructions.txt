Dockerize BOTH apps - the Python and the Node app.

1) Create appropriate images for both apps (two separate images!).
HINT: Have a brief look at the app code to configure your images correctly!

a. create a Docker file
b. run the command "docker build ."

2) Launch a container for each created image, making sure, 
that the app inside the container works correctly and is usable.

we are in node-app
a. docker images
b. docker run -p 8000:3000 <image_id>

we are in python-app
a. docker images
b. docker run -it <image_id>

3) Re-create both containers and assign names to both containers.
Use these names to stop and restart both containers.

we are in node-app
a. docker images
b. docker run -p 8000:3000 -d --rm --name tonyNodeApp <image_id>

we are in python-app
a. docker images
b. docker run -it --name pythonApp <image_id>
after stopping the pythonApp and if you want to run it again, remember do it in the interacte mode
docker start -i -a pythonApp



4) Clean up (remove) all stopped (and running) containers, 
clean up all created images.

To remove the containers
docker ps -a
docker rm <container_name> <container_name> <container_name>

To remove images
docker images
docker rmi <image_id> or docker image prune
to remove all the images even if it has a tags docker image purne -a 

5) Re-build the images - this time with names and tags assigned to them.

docker build -t node-demo:latest .
docker build -t bmi-app:1 .


6) Run new containers based on the re-built images, ensuring that the containers
are removed automatically when stopped.

docker run -p 8000:3000 -d --name TONY --rm node-demo:latest
docker run -it --name TonyPython --rm bmi-app:1