First of all let's run:
docker-compose up -d --build, play around post man
then docker-compose down

minikube status to check if the minikube is running!
==> minikube start --driver=docker


Create a repository in Docker-hub(kub-demo-xxxx), then move to users-api dir and run:
docker build -t tonyhomsi/kub-demo-user . 
docker push tonyhomsi/kub-demo-user


Now add user-deployment.yaml file and run:
kubectl apply -f=users-deployment.yaml

Add User-service.yaml file and run:
kubectl apply -f=users-service.yaml and to access it you need to run 
minikube service users-service


###################################### Multiple Container in One Pod ##################################
let's go back to users.app.js and change the 
const hashedPW = await axios.get('http://auth/hashed-password/' + password);  ==>
const hashedPW = await axios.get(`http://${process.env.AUTH_ADDRESS}/hashed-password/` + password);

Now let's go to docker-compose and modify the file by adding environment:
users:
    build: ./users-api
    environment:
      AUTH_ADDRESS: auth


now move to the auth-api dirc and create a new repository on Docker-hub and run:
docker build -t tonyhomsi/kub-demo-auth . 
docker push tonyhomsi/kub-demo-auth

now add the new image to the user-deployment.yaml:
- name: auth
        image: tonyhomsi/kub-demo-auth:latest

then go to users-api dirc
and run:
docker build -t tonyhomsi/kub-demo-user . 
docker push tonyhomsi/kub-demo-user

edit the user-deployment file by adding:
 env:
    - name: AUTH_ADDRESS
      value: localhost

then go to kubernetes dir and run:
kubectl apply -f=users-deployment.yaml
kubectl get pods

############### Creating Multiple Deployments #################
Create auth-deployments and auth-service files

But how to make these two pods to communicate with each others!

let's be on kubernetes dirc, then run:
kubectl apply -f=auth-service.yaml -f=auth-deployment.yaml
kubectl get services


change the users-deployment.yaml file as following:
 env:
            - name: AUTH_ADDRESS
              value: "10.96.232.143"
where the value getting from the "kubectl get services" it's annoying to get the ip address manually!

then run: kubectl apply -f=users-deployment.yaml
kubectl get pods

using postman to check if it works!

## it's annoying to get the ip address manually!##
to fix that we can use AUTH_SERVICE_SERVICE_HOST and replace it in the app.js file and then add it in docker-compose.

then go to user-api and run:
docker build -t tonyhomsi/kub-demo-user . 
docker push tonyhomsi/kub-demo-user

Now go to kubernetes folder:
delete the old one:
kubectl delete -f=users-deployment.yaml
kubectl apply -f=users-deployment.yaml
kubectl get pods

########### Using DNS for Pod to Pod Communication ##################
Edit the user-deployment.yaml file:
env:
    - name: AUTH_ADDRESS
    # value: "10.96.232.143"
    value: "auth-service.default"


then run:
kubectl apply -f=users-deployment.yaml ... 
use postman and check if it works!


###### Creating Deployment & service for tasks api #########
1. create Deployment & service files
2. create a repository on docker-hub and name it tonyhomsi/kub-demo-tasks
3. go to dir tasks-api. then run:
docker build -t tonyhomsi/kub-demo-tasks . 
docker push tonyhomsi/kub-demo-tasks

5. go to kubernetes folder and run:
kubectl apply -f=tasks-deployment.yaml -f=tasks-service.yaml

kubectl get pods # we got an error crashloopbackoff!!
to fix that we need to add in the tasks-deployment.yaml:
- name: TASKS_FOLDER
  value: tasks #creating an empty folder in the dirc tasks-api

then: 
kubectl apply -f=tasks-deployment.yaml -f=tasks-service.yaml
kubectl get pods
kubectl get services
now it works

then re-lanuch the service:
, where as tasks-service getting from the kubectl get services
minikube service tasks-service


######### Adding frontend folder ##################
1. Change the id address of the App.js file according to the given one after running the minikube service tasks-service
2. then create a repository on docker-hub: tonyhomsi/kub-demo-frontend
3. docker build -t tonyhomsi/kub-demo-frontend .
4. docker run -p 80:80 --rm -d tonyhomsi/kub-demo-frontend

go to browser: localhost!
it works because I already add some extra code in the tasks-app.js:
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST,GET,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type,Authorization');
  next();
})

and also add: 
const fetchTasks = useCallback(function () {
    fetch('http://127.0.0.1:59529/tasks', {
      headers: {
        'Authorization': 'Bearer abc'
      }
    })

then build the image again in the tasks-api and push it docker push tonyhomsi/kub-demo-frontend
kubectl delete -f=tasks-deployment.yaml
kubectl apply -f=tasks-deployment.yaml


##### Deploying the frontend with kubernetes #######
Create frontend(deployment & service).yaml files and then run:
docker push tonyhomsi/kub-demo-frontend
kubectl apply -f=frontend-service.yaml -f=frontend-deployment.yaml
kubectl get pods
kubectl get service
minikube service frontend-service


############### Using a Reverse Proxy for the Frontend #################
To aviod hard coding IP address!

Change the configuration in the app.js and nginx.conf:
in the nginx.config, add the following:
 location /api {
    proxy_pass http://127.0.0.1:58575;
  }

then run:
docker build -t tonyhomsi/kub-demo-frontend .
docker push tonyhomsi/kub-demo-frontend
then go to kubernetes folder:
kubectl delete -f=frontend-deployment.yaml
kubectl apply -f=frontend-deployment.yaml

check the localhost in the browser: It doesn't work perfectly: I can't see my tasks, failed.

Now again change the nginx.conf as following:
location /api/ {
    proxy_pass http://tasks-service.default:8000/;
  }


go back and repeat the previous steps:

